[
  ["mvp"                 , "unreachable"              , ["0x00"]        , []                                                 , null        ],
  ["mvp"                 , "nop"                      , ["0x01"]        , []                                                 , null        ],
  ["mvp"                 , "block"                    , ["0x02"]        , [["blockType", "BlockType"]]                       , null        ],
  ["mvp"                 , "loop"                     , ["0x03"]        , [["blockType", "BlockType"]]                       , null        ],
  ["mvp"                 , "if"                       , ["0x04"]        , [["blockType", "BlockType"]]                       , null        ],
  ["mvp"                 , "else"                     , ["0x05"]        , []                                                 , null        ],
  ["mvp"                 , "end"                      , ["0x0B"]        , []                                                 , null        ],
  ["mvp"                 , "br"                       , ["0x0C"]        , [["relativeDepth", "UInt32"]]                      , null        ],
  ["mvp"                 , "br_if"                    , ["0x0D"]        , [["relativeDepth", "UInt32"]]                      , null        ],
  ["mvp"                 , "br_table"                 , ["0x0E"]        , [["targets", "BrTable"]]                           , null        ],
  ["mvp"                 , "return"                   , ["0x0F"]        , []                                                 , null        ],
  ["mvp"                 , "call"                     , ["0x10"]        , [["functionIndex", "UInt32"]]                      , null        ],
  ["mvp"                 , "call_indirect"            , ["0x11"]        , [["typeIndex", "UInt32"], ["tableIndex", "UInt32"]], null        ],
  ["tailCall"            , "return_call"              , ["0x12"]        , [["functionIndex", "UInt32"]]                      , null        ],
  ["tailCall"            , "return_call_indirect"     , ["0x13"]        , [["typeIndex", "UInt32"], ["tableIndex", "UInt32"]], null        ],
  ["functionReferences"  , "call_ref"                 , ["0x14"]        , [["typeIndex", "UInt32"]]                          , null        ],
  ["functionReferences"  , "return_call_ref"          , ["0x15"]        , [["typeIndex", "UInt32"]]                          , null        ],
  ["mvp"                 , "drop"                     , ["0x1A"]        , []                                                 , null        ],
  ["mvp"                 , "select"                   , ["0x1B"]        , []                                                 , null        ],
  ["referenceTypes"      , {"enumCase": "typedSelect"}, ["0x1C"]        , [["type", "ValueType"]]                            , null        ],
  ["mvp"                 , "local.get"                , ["0x20"]        , [["localIndex", "UInt32"]]                         , null        ],
  ["mvp"                 , "local.set"                , ["0x21"]        , [["localIndex", "UInt32"]]                         , null        ],
  ["mvp"                 , "local.tee"                , ["0x22"]        , [["localIndex", "UInt32"]]                         , null        ],
  ["mvp"                 , "global.get"               , ["0x23"]        , [["globalIndex", "UInt32"]]                        , null        ],
  ["mvp"                 , "global.set"               , ["0x24"]        , [["globalIndex", "UInt32"]]                        , null        ],
  ["mvp"                 , "i32.load"                 , ["0x28"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load"                 , ["0x29"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "f32.load"                 , ["0x2A"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "f64.load"                 , ["0x2B"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i32.load8_s"              , ["0x2C"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i32.load8_u"              , ["0x2D"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i32.load16_s"             , ["0x2E"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i32.load16_u"             , ["0x2F"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load8_s"              , ["0x30"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load8_u"              , ["0x31"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load16_s"             , ["0x32"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load16_u"             , ["0x33"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load32_s"             , ["0x34"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i64.load32_u"             , ["0x35"]        , [["memarg", "MemArg"]]                             , "load"      ],
  ["mvp"                 , "i32.store"                , ["0x36"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i64.store"                , ["0x37"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "f32.store"                , ["0x38"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "f64.store"                , ["0x39"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i32.store8"               , ["0x3A"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i32.store16"              , ["0x3B"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i64.store8"               , ["0x3C"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i64.store16"              , ["0x3D"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "i64.store32"              , ["0x3E"]        , [["memarg", "MemArg"]]                             , "store"     ],
  ["mvp"                 , "memory.size"              , ["0x3F"]        , [["memory", "UInt32"]]                             , null        ],
  ["mvp"                 , "memory.grow"              , ["0x40"]        , [["memory", "UInt32"]]                             , null        ],
  ["mvp"                 , "i32.const"                , ["0x41"]        , [["value", "Int32"]]                               , null        ],
  ["mvp"                 , "i64.const"                , ["0x42"]        , [["value", "Int64"]]                               , null        ],
  ["mvp"                 , "f32.const"                , ["0x43"]        , [["value", "IEEE754.Float32"]]                     , null        ],
  ["mvp"                 , "f64.const"                , ["0x44"]        , [["value", "IEEE754.Float64"]]                     , null        ],
  ["referenceTypes"      , "ref.null"                 , ["0xD0"]        , [["type", "HeapType"]]                             , null        ],
  ["referenceTypes"      , "ref.is_null"              , ["0xD1"]        , []                                                 , null        ],
  ["referenceTypes"      , "ref.func"                 , ["0xD2"]        , [["functionIndex", "UInt32"]]                      , null        ],
  ["functionReferences"  , "ref.as_non_null"          , ["0xD4"]        , []                                                 , null        ],
  ["functionReferences"  , "br_on_null"               , ["0xD5"]        , [["relativeDepth", "UInt32"]]                      , null        ],
  ["functionReferences"  , "br_on_non_null"           , ["0xD6"]        , [["relativeDepth", "UInt32"]]                      , null        ],
  ["mvp"                 , "i32.eqz"                  , ["0x45"]        , []                                                 , null        ],
  ["mvp"                 , "i32.eq"                   , ["0x46"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.ne"                   , ["0x47"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.lt_s"                 , ["0x48"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.lt_u"                 , ["0x49"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.gt_s"                 , ["0x4A"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.gt_u"                 , ["0x4B"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.le_s"                 , ["0x4C"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.le_u"                 , ["0x4D"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.ge_s"                 , ["0x4E"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.ge_u"                 , ["0x4F"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.eqz"                  , ["0x50"]        , []                                                 , null        ],
  ["mvp"                 , "i64.eq"                   , ["0x51"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.ne"                   , ["0x52"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.lt_s"                 , ["0x53"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.lt_u"                 , ["0x54"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.gt_s"                 , ["0x55"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.gt_u"                 , ["0x56"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.le_s"                 , ["0x57"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.le_u"                 , ["0x58"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.ge_s"                 , ["0x59"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i64.ge_u"                 , ["0x5A"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.eq"                   , ["0x5B"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.ne"                   , ["0x5C"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.lt"                   , ["0x5D"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.gt"                   , ["0x5E"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.le"                   , ["0x5F"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f32.ge"                   , ["0x60"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.eq"                   , ["0x61"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.ne"                   , ["0x62"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.lt"                   , ["0x63"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.gt"                   , ["0x64"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.le"                   , ["0x65"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "f64.ge"                   , ["0x66"]        , []                                                 , "cmp"       ],
  ["mvp"                 , "i32.clz"                  , ["0x67"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i32.ctz"                  , ["0x68"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i32.popcnt"               , ["0x69"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i32.add"                  , ["0x6A"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.sub"                  , ["0x6B"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.mul"                  , ["0x6C"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.div_s"                , ["0x6D"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.div_u"                , ["0x6E"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.rem_s"                , ["0x6F"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.rem_u"                , ["0x70"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.and"                  , ["0x71"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.or"                   , ["0x72"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.xor"                  , ["0x73"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.shl"                  , ["0x74"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.shr_s"                , ["0x75"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.shr_u"                , ["0x76"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.rotl"                 , ["0x77"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.rotr"                 , ["0x78"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.clz"                  , ["0x79"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i64.ctz"                  , ["0x7A"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i64.popcnt"               , ["0x7B"]        , []                                                 , "unary"     ],
  ["mvp"                 , "i64.add"                  , ["0x7C"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.sub"                  , ["0x7D"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.mul"                  , ["0x7E"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.div_s"                , ["0x7F"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.div_u"                , ["0x80"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.rem_s"                , ["0x81"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.rem_u"                , ["0x82"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.and"                  , ["0x83"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.or"                   , ["0x84"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.xor"                  , ["0x85"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.shl"                  , ["0x86"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.shr_s"                , ["0x87"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.shr_u"                , ["0x88"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.rotl"                 , ["0x89"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i64.rotr"                 , ["0x8A"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.abs"                  , ["0x8B"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.neg"                  , ["0x8C"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.ceil"                 , ["0x8D"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.floor"                , ["0x8E"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.trunc"                , ["0x8F"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.nearest"              , ["0x90"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.sqrt"                 , ["0x91"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f32.add"                  , ["0x92"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.sub"                  , ["0x93"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.mul"                  , ["0x94"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.div"                  , ["0x95"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.min"                  , ["0x96"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.max"                  , ["0x97"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f32.copysign"             , ["0x98"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.abs"                  , ["0x99"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.neg"                  , ["0x9A"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.ceil"                 , ["0x9B"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.floor"                , ["0x9C"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.trunc"                , ["0x9D"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.nearest"              , ["0x9E"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.sqrt"                 , ["0x9F"]        , []                                                 , "unary"     ],
  ["mvp"                 , "f64.add"                  , ["0xA0"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.sub"                  , ["0xA1"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.mul"                  , ["0xA2"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.div"                  , ["0xA3"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.min"                  , ["0xA4"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.max"                  , ["0xA5"]        , []                                                 , "binary"    ],
  ["mvp"                 , "f64.copysign"             , ["0xA6"]        , []                                                 , "binary"    ],
  ["mvp"                 , "i32.wrap_i64"             , ["0xA7"]        , []                                                 , "conversion"],
  ["mvp"                 , "i32.trunc_f32_s"          , ["0xA8"]        , []                                                 , "conversion"],
  ["mvp"                 , "i32.trunc_f32_u"          , ["0xA9"]        , []                                                 , "conversion"],
  ["mvp"                 , "i32.trunc_f64_s"          , ["0xAA"]        , []                                                 , "conversion"],
  ["mvp"                 , "i32.trunc_f64_u"          , ["0xAB"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.extend_i32_s"         , ["0xAC"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.extend_i32_u"         , ["0xAD"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.trunc_f32_s"          , ["0xAE"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.trunc_f32_u"          , ["0xAF"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.trunc_f64_s"          , ["0xB0"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.trunc_f64_u"          , ["0xB1"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.convert_i32_s"        , ["0xB2"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.convert_i32_u"        , ["0xB3"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.convert_i64_s"        , ["0xB4"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.convert_i64_u"        , ["0xB5"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.demote_f64"           , ["0xB6"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.convert_i32_s"        , ["0xB7"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.convert_i32_u"        , ["0xB8"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.convert_i64_s"        , ["0xB9"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.convert_i64_u"        , ["0xBA"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.promote_f32"          , ["0xBB"]        , []                                                 , "conversion"],
  ["mvp"                 , "i32.reinterpret_f32"      , ["0xBC"]        , []                                                 , "conversion"],
  ["mvp"                 , "i64.reinterpret_f64"      , ["0xBD"]        , []                                                 , "conversion"],
  ["mvp"                 , "f32.reinterpret_i32"      , ["0xBE"]        , []                                                 , "conversion"],
  ["mvp"                 , "f64.reinterpret_i64"      , ["0xBF"]        , []                                                 , "conversion"],
  ["signExtension"       , "i32.extend8_s"            , ["0xC0"]        , []                                                 , "unary"     ],
  ["signExtension"       , "i32.extend16_s"           , ["0xC1"]        , []                                                 , "unary"     ],
  ["signExtension"       , "i64.extend8_s"            , ["0xC2"]        , []                                                 , "unary"     ],
  ["signExtension"       , "i64.extend16_s"           , ["0xC3"]        , []                                                 , "unary"     ],
  ["signExtension"       , "i64.extend32_s"           , ["0xC4"]        , []                                                 , "unary"     ],
  ["bulkMemory"          , "memory.init"              , ["0xFC", "0x08"], [["dataIndex", "UInt32"]]                          , null        ],
  ["bulkMemory"          , "data.drop"                , ["0xFC", "0x09"], [["dataIndex", "UInt32"]]                          , null        ],
  ["bulkMemory"          , "memory.copy"              , ["0xFC", "0x0A"], [["dstMem", "UInt32"], ["srcMem", "UInt32"]]       , null        ],
  ["bulkMemory"          , "memory.fill"              , ["0xFC", "0x0B"], [["memory", "UInt32"]]                             , null        ],
  ["bulkMemory"          , "table.init"               , ["0xFC", "0x0C"], [["elemIndex", "UInt32"], ["table", "UInt32"]]     , null        ],
  ["bulkMemory"          , "elem.drop"                , ["0xFC", "0x0D"], [["elemIndex", "UInt32"]]                          , null        ],
  ["bulkMemory"          , "table.copy"               , ["0xFC", "0x0E"], [["dstTable", "UInt32"], ["srcTable", "UInt32"]]   , null        ],
  ["referenceTypes"      , "table.fill"               , ["0xFC", "0x11"], [["table", "UInt32"]]                              , null        ],
  ["referenceTypes"      , "table.get"                , ["0x25"]        , [["table", "UInt32"]]                              , null        ],
  ["referenceTypes"      , "table.set"                , ["0x26"]        , [["table", "UInt32"]]                              , null        ],
  ["referenceTypes"      , "table.grow"               , ["0xFC", "0x0F"], [["table", "UInt32"]]                              , null        ],
  ["referenceTypes"      , "table.size"               , ["0xFC", "0x10"], [["table", "UInt32"]]                              , null        ],
  ["saturatingFloatToInt", "i32.trunc_sat_f32_s"      , ["0xFC", "0x00"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i32.trunc_sat_f32_u"      , ["0xFC", "0x01"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i32.trunc_sat_f64_s"      , ["0xFC", "0x02"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i32.trunc_sat_f64_u"      , ["0xFC", "0x03"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i64.trunc_sat_f32_s"      , ["0xFC", "0x04"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i64.trunc_sat_f32_u"      , ["0xFC", "0x05"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i64.trunc_sat_f64_s"      , ["0xFC", "0x06"], []                                                 , "conversion"],
  ["saturatingFloatToInt", "i64.trunc_sat_f64_u"      , ["0xFC", "0x07"], []                                                 , "conversion"]
]
