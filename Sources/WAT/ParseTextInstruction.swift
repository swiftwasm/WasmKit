// swift-format-ignore-file
//// Automatically generated by Utilities/Sources/WasmGen.swift
//// DO NOT EDIT DIRECTLY

import WasmParser
import WasmTypes

/// Parses a text instruction, consuming immediate tokens as necessary.
/// - Parameters:
///   - keyword: The keyword of the instruction.
///   - expressionParser: The expression parser.
/// - Returns: A closure that invokes the corresponding visitor method. Nil if the keyword is not recognized.
///
/// Note: The returned closure does not consume any tokens.
func parseTextInstruction<V: InstructionVisitor>(keyword: String, expressionParser: inout ExpressionParser<V>, wat: inout Wat) throws -> ((inout V) throws -> Void)? {
    switch keyword {
    case "unreachable": return { return try $0.visitUnreachable() }
    case "nop": return { return try $0.visitNop() }
    case "block":
        let (blockType) = try expressionParser.visitBlock(wat: &wat)
        return { return try $0.visitBlock(blockType: blockType) }
    case "loop":
        let (blockType) = try expressionParser.visitLoop(wat: &wat)
        return { return try $0.visitLoop(blockType: blockType) }
    case "if":
        let (blockType) = try expressionParser.visitIf(wat: &wat)
        return { return try $0.visitIf(blockType: blockType) }
    case "else": return { return try $0.visitElse() }
    case "end": return { return try $0.visitEnd() }
    case "br":
        let (relativeDepth) = try expressionParser.visitBr(wat: &wat)
        return { return try $0.visitBr(relativeDepth: relativeDepth) }
    case "br_if":
        let (relativeDepth) = try expressionParser.visitBrIf(wat: &wat)
        return { return try $0.visitBrIf(relativeDepth: relativeDepth) }
    case "br_table":
        let (targets) = try expressionParser.visitBrTable(wat: &wat)
        return { return try $0.visitBrTable(targets: targets) }
    case "return": return { return try $0.visitReturn() }
    case "call":
        let (functionIndex) = try expressionParser.visitCall(wat: &wat)
        return { return try $0.visitCall(functionIndex: functionIndex) }
    case "call_indirect":
        let (typeIndex, tableIndex) = try expressionParser.visitCallIndirect(wat: &wat)
        return { return try $0.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex) }
    case "return_call":
        let (functionIndex) = try expressionParser.visitReturnCall(wat: &wat)
        return { return try $0.visitReturnCall(functionIndex: functionIndex) }
    case "return_call_indirect":
        let (typeIndex, tableIndex) = try expressionParser.visitReturnCallIndirect(wat: &wat)
        return { return try $0.visitReturnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex) }
    case "call_ref":
        let (typeIndex) = try expressionParser.visitCallRef(wat: &wat)
        return { return try $0.visitCallRef(typeIndex: typeIndex) }
    case "return_call_ref":
        let (typeIndex) = try expressionParser.visitReturnCallRef(wat: &wat)
        return { return try $0.visitReturnCallRef(typeIndex: typeIndex) }
    case "drop": return { return try $0.visitDrop() }
    case "select": return { return try $0.visitSelect() }
    case "local.get":
        let (localIndex) = try expressionParser.visitLocalGet(wat: &wat)
        return { return try $0.visitLocalGet(localIndex: localIndex) }
    case "local.set":
        let (localIndex) = try expressionParser.visitLocalSet(wat: &wat)
        return { return try $0.visitLocalSet(localIndex: localIndex) }
    case "local.tee":
        let (localIndex) = try expressionParser.visitLocalTee(wat: &wat)
        return { return try $0.visitLocalTee(localIndex: localIndex) }
    case "global.get":
        let (globalIndex) = try expressionParser.visitGlobalGet(wat: &wat)
        return { return try $0.visitGlobalGet(globalIndex: globalIndex) }
    case "global.set":
        let (globalIndex) = try expressionParser.visitGlobalSet(wat: &wat)
        return { return try $0.visitGlobalSet(globalIndex: globalIndex) }
    case "i32.load":
        let (memarg) = try expressionParser.visitLoad(.i32Load, wat: &wat)
        return { return try $0.visitLoad(.i32Load, memarg: memarg) }
    case "i64.load":
        let (memarg) = try expressionParser.visitLoad(.i64Load, wat: &wat)
        return { return try $0.visitLoad(.i64Load, memarg: memarg) }
    case "f32.load":
        let (memarg) = try expressionParser.visitLoad(.f32Load, wat: &wat)
        return { return try $0.visitLoad(.f32Load, memarg: memarg) }
    case "f64.load":
        let (memarg) = try expressionParser.visitLoad(.f64Load, wat: &wat)
        return { return try $0.visitLoad(.f64Load, memarg: memarg) }
    case "i32.load8_s":
        let (memarg) = try expressionParser.visitLoad(.i32Load8S, wat: &wat)
        return { return try $0.visitLoad(.i32Load8S, memarg: memarg) }
    case "i32.load8_u":
        let (memarg) = try expressionParser.visitLoad(.i32Load8U, wat: &wat)
        return { return try $0.visitLoad(.i32Load8U, memarg: memarg) }
    case "i32.load16_s":
        let (memarg) = try expressionParser.visitLoad(.i32Load16S, wat: &wat)
        return { return try $0.visitLoad(.i32Load16S, memarg: memarg) }
    case "i32.load16_u":
        let (memarg) = try expressionParser.visitLoad(.i32Load16U, wat: &wat)
        return { return try $0.visitLoad(.i32Load16U, memarg: memarg) }
    case "i64.load8_s":
        let (memarg) = try expressionParser.visitLoad(.i64Load8S, wat: &wat)
        return { return try $0.visitLoad(.i64Load8S, memarg: memarg) }
    case "i64.load8_u":
        let (memarg) = try expressionParser.visitLoad(.i64Load8U, wat: &wat)
        return { return try $0.visitLoad(.i64Load8U, memarg: memarg) }
    case "i64.load16_s":
        let (memarg) = try expressionParser.visitLoad(.i64Load16S, wat: &wat)
        return { return try $0.visitLoad(.i64Load16S, memarg: memarg) }
    case "i64.load16_u":
        let (memarg) = try expressionParser.visitLoad(.i64Load16U, wat: &wat)
        return { return try $0.visitLoad(.i64Load16U, memarg: memarg) }
    case "i64.load32_s":
        let (memarg) = try expressionParser.visitLoad(.i64Load32S, wat: &wat)
        return { return try $0.visitLoad(.i64Load32S, memarg: memarg) }
    case "i64.load32_u":
        let (memarg) = try expressionParser.visitLoad(.i64Load32U, wat: &wat)
        return { return try $0.visitLoad(.i64Load32U, memarg: memarg) }
    case "i32.store":
        let (memarg) = try expressionParser.visitStore(.i32Store, wat: &wat)
        return { return try $0.visitStore(.i32Store, memarg: memarg) }
    case "i64.store":
        let (memarg) = try expressionParser.visitStore(.i64Store, wat: &wat)
        return { return try $0.visitStore(.i64Store, memarg: memarg) }
    case "f32.store":
        let (memarg) = try expressionParser.visitStore(.f32Store, wat: &wat)
        return { return try $0.visitStore(.f32Store, memarg: memarg) }
    case "f64.store":
        let (memarg) = try expressionParser.visitStore(.f64Store, wat: &wat)
        return { return try $0.visitStore(.f64Store, memarg: memarg) }
    case "i32.store8":
        let (memarg) = try expressionParser.visitStore(.i32Store8, wat: &wat)
        return { return try $0.visitStore(.i32Store8, memarg: memarg) }
    case "i32.store16":
        let (memarg) = try expressionParser.visitStore(.i32Store16, wat: &wat)
        return { return try $0.visitStore(.i32Store16, memarg: memarg) }
    case "i64.store8":
        let (memarg) = try expressionParser.visitStore(.i64Store8, wat: &wat)
        return { return try $0.visitStore(.i64Store8, memarg: memarg) }
    case "i64.store16":
        let (memarg) = try expressionParser.visitStore(.i64Store16, wat: &wat)
        return { return try $0.visitStore(.i64Store16, memarg: memarg) }
    case "i64.store32":
        let (memarg) = try expressionParser.visitStore(.i64Store32, wat: &wat)
        return { return try $0.visitStore(.i64Store32, memarg: memarg) }
    case "memory.size":
        let (memory) = try expressionParser.visitMemorySize(wat: &wat)
        return { return try $0.visitMemorySize(memory: memory) }
    case "memory.grow":
        let (memory) = try expressionParser.visitMemoryGrow(wat: &wat)
        return { return try $0.visitMemoryGrow(memory: memory) }
    case "i32.const":
        let (value) = try expressionParser.visitI32Const(wat: &wat)
        return { return try $0.visitI32Const(value: value) }
    case "i64.const":
        let (value) = try expressionParser.visitI64Const(wat: &wat)
        return { return try $0.visitI64Const(value: value) }
    case "f32.const":
        let (value) = try expressionParser.visitF32Const(wat: &wat)
        return { return try $0.visitF32Const(value: value) }
    case "f64.const":
        let (value) = try expressionParser.visitF64Const(wat: &wat)
        return { return try $0.visitF64Const(value: value) }
    case "ref.null":
        let (type) = try expressionParser.visitRefNull(wat: &wat)
        return { return try $0.visitRefNull(type: type) }
    case "ref.is_null": return { return try $0.visitRefIsNull() }
    case "ref.func":
        let (functionIndex) = try expressionParser.visitRefFunc(wat: &wat)
        return { return try $0.visitRefFunc(functionIndex: functionIndex) }
    case "ref.as_non_null": return { return try $0.visitRefAsNonNull() }
    case "br_on_null":
        let (relativeDepth) = try expressionParser.visitBrOnNull(wat: &wat)
        return { return try $0.visitBrOnNull(relativeDepth: relativeDepth) }
    case "br_on_non_null":
        let (relativeDepth) = try expressionParser.visitBrOnNonNull(wat: &wat)
        return { return try $0.visitBrOnNonNull(relativeDepth: relativeDepth) }
    case "i32.eqz": return { return try $0.visitI32Eqz() }
    case "i32.eq": return { return try $0.visitCmp(.i32Eq) }
    case "i32.ne": return { return try $0.visitCmp(.i32Ne) }
    case "i32.lt_s": return { return try $0.visitCmp(.i32LtS) }
    case "i32.lt_u": return { return try $0.visitCmp(.i32LtU) }
    case "i32.gt_s": return { return try $0.visitCmp(.i32GtS) }
    case "i32.gt_u": return { return try $0.visitCmp(.i32GtU) }
    case "i32.le_s": return { return try $0.visitCmp(.i32LeS) }
    case "i32.le_u": return { return try $0.visitCmp(.i32LeU) }
    case "i32.ge_s": return { return try $0.visitCmp(.i32GeS) }
    case "i32.ge_u": return { return try $0.visitCmp(.i32GeU) }
    case "i64.eqz": return { return try $0.visitI64Eqz() }
    case "i64.eq": return { return try $0.visitCmp(.i64Eq) }
    case "i64.ne": return { return try $0.visitCmp(.i64Ne) }
    case "i64.lt_s": return { return try $0.visitCmp(.i64LtS) }
    case "i64.lt_u": return { return try $0.visitCmp(.i64LtU) }
    case "i64.gt_s": return { return try $0.visitCmp(.i64GtS) }
    case "i64.gt_u": return { return try $0.visitCmp(.i64GtU) }
    case "i64.le_s": return { return try $0.visitCmp(.i64LeS) }
    case "i64.le_u": return { return try $0.visitCmp(.i64LeU) }
    case "i64.ge_s": return { return try $0.visitCmp(.i64GeS) }
    case "i64.ge_u": return { return try $0.visitCmp(.i64GeU) }
    case "f32.eq": return { return try $0.visitCmp(.f32Eq) }
    case "f32.ne": return { return try $0.visitCmp(.f32Ne) }
    case "f32.lt": return { return try $0.visitCmp(.f32Lt) }
    case "f32.gt": return { return try $0.visitCmp(.f32Gt) }
    case "f32.le": return { return try $0.visitCmp(.f32Le) }
    case "f32.ge": return { return try $0.visitCmp(.f32Ge) }
    case "f64.eq": return { return try $0.visitCmp(.f64Eq) }
    case "f64.ne": return { return try $0.visitCmp(.f64Ne) }
    case "f64.lt": return { return try $0.visitCmp(.f64Lt) }
    case "f64.gt": return { return try $0.visitCmp(.f64Gt) }
    case "f64.le": return { return try $0.visitCmp(.f64Le) }
    case "f64.ge": return { return try $0.visitCmp(.f64Ge) }
    case "i32.clz": return { return try $0.visitUnary(.i32Clz) }
    case "i32.ctz": return { return try $0.visitUnary(.i32Ctz) }
    case "i32.popcnt": return { return try $0.visitUnary(.i32Popcnt) }
    case "i32.add": return { return try $0.visitBinary(.i32Add) }
    case "i32.sub": return { return try $0.visitBinary(.i32Sub) }
    case "i32.mul": return { return try $0.visitBinary(.i32Mul) }
    case "i32.div_s": return { return try $0.visitBinary(.i32DivS) }
    case "i32.div_u": return { return try $0.visitBinary(.i32DivU) }
    case "i32.rem_s": return { return try $0.visitBinary(.i32RemS) }
    case "i32.rem_u": return { return try $0.visitBinary(.i32RemU) }
    case "i32.and": return { return try $0.visitBinary(.i32And) }
    case "i32.or": return { return try $0.visitBinary(.i32Or) }
    case "i32.xor": return { return try $0.visitBinary(.i32Xor) }
    case "i32.shl": return { return try $0.visitBinary(.i32Shl) }
    case "i32.shr_s": return { return try $0.visitBinary(.i32ShrS) }
    case "i32.shr_u": return { return try $0.visitBinary(.i32ShrU) }
    case "i32.rotl": return { return try $0.visitBinary(.i32Rotl) }
    case "i32.rotr": return { return try $0.visitBinary(.i32Rotr) }
    case "i64.clz": return { return try $0.visitUnary(.i64Clz) }
    case "i64.ctz": return { return try $0.visitUnary(.i64Ctz) }
    case "i64.popcnt": return { return try $0.visitUnary(.i64Popcnt) }
    case "i64.add": return { return try $0.visitBinary(.i64Add) }
    case "i64.sub": return { return try $0.visitBinary(.i64Sub) }
    case "i64.mul": return { return try $0.visitBinary(.i64Mul) }
    case "i64.div_s": return { return try $0.visitBinary(.i64DivS) }
    case "i64.div_u": return { return try $0.visitBinary(.i64DivU) }
    case "i64.rem_s": return { return try $0.visitBinary(.i64RemS) }
    case "i64.rem_u": return { return try $0.visitBinary(.i64RemU) }
    case "i64.and": return { return try $0.visitBinary(.i64And) }
    case "i64.or": return { return try $0.visitBinary(.i64Or) }
    case "i64.xor": return { return try $0.visitBinary(.i64Xor) }
    case "i64.shl": return { return try $0.visitBinary(.i64Shl) }
    case "i64.shr_s": return { return try $0.visitBinary(.i64ShrS) }
    case "i64.shr_u": return { return try $0.visitBinary(.i64ShrU) }
    case "i64.rotl": return { return try $0.visitBinary(.i64Rotl) }
    case "i64.rotr": return { return try $0.visitBinary(.i64Rotr) }
    case "f32.abs": return { return try $0.visitUnary(.f32Abs) }
    case "f32.neg": return { return try $0.visitUnary(.f32Neg) }
    case "f32.ceil": return { return try $0.visitUnary(.f32Ceil) }
    case "f32.floor": return { return try $0.visitUnary(.f32Floor) }
    case "f32.trunc": return { return try $0.visitUnary(.f32Trunc) }
    case "f32.nearest": return { return try $0.visitUnary(.f32Nearest) }
    case "f32.sqrt": return { return try $0.visitUnary(.f32Sqrt) }
    case "f32.add": return { return try $0.visitBinary(.f32Add) }
    case "f32.sub": return { return try $0.visitBinary(.f32Sub) }
    case "f32.mul": return { return try $0.visitBinary(.f32Mul) }
    case "f32.div": return { return try $0.visitBinary(.f32Div) }
    case "f32.min": return { return try $0.visitBinary(.f32Min) }
    case "f32.max": return { return try $0.visitBinary(.f32Max) }
    case "f32.copysign": return { return try $0.visitBinary(.f32Copysign) }
    case "f64.abs": return { return try $0.visitUnary(.f64Abs) }
    case "f64.neg": return { return try $0.visitUnary(.f64Neg) }
    case "f64.ceil": return { return try $0.visitUnary(.f64Ceil) }
    case "f64.floor": return { return try $0.visitUnary(.f64Floor) }
    case "f64.trunc": return { return try $0.visitUnary(.f64Trunc) }
    case "f64.nearest": return { return try $0.visitUnary(.f64Nearest) }
    case "f64.sqrt": return { return try $0.visitUnary(.f64Sqrt) }
    case "f64.add": return { return try $0.visitBinary(.f64Add) }
    case "f64.sub": return { return try $0.visitBinary(.f64Sub) }
    case "f64.mul": return { return try $0.visitBinary(.f64Mul) }
    case "f64.div": return { return try $0.visitBinary(.f64Div) }
    case "f64.min": return { return try $0.visitBinary(.f64Min) }
    case "f64.max": return { return try $0.visitBinary(.f64Max) }
    case "f64.copysign": return { return try $0.visitBinary(.f64Copysign) }
    case "i32.wrap_i64": return { return try $0.visitConversion(.i32WrapI64) }
    case "i32.trunc_f32_s": return { return try $0.visitConversion(.i32TruncF32S) }
    case "i32.trunc_f32_u": return { return try $0.visitConversion(.i32TruncF32U) }
    case "i32.trunc_f64_s": return { return try $0.visitConversion(.i32TruncF64S) }
    case "i32.trunc_f64_u": return { return try $0.visitConversion(.i32TruncF64U) }
    case "i64.extend_i32_s": return { return try $0.visitConversion(.i64ExtendI32S) }
    case "i64.extend_i32_u": return { return try $0.visitConversion(.i64ExtendI32U) }
    case "i64.trunc_f32_s": return { return try $0.visitConversion(.i64TruncF32S) }
    case "i64.trunc_f32_u": return { return try $0.visitConversion(.i64TruncF32U) }
    case "i64.trunc_f64_s": return { return try $0.visitConversion(.i64TruncF64S) }
    case "i64.trunc_f64_u": return { return try $0.visitConversion(.i64TruncF64U) }
    case "f32.convert_i32_s": return { return try $0.visitConversion(.f32ConvertI32S) }
    case "f32.convert_i32_u": return { return try $0.visitConversion(.f32ConvertI32U) }
    case "f32.convert_i64_s": return { return try $0.visitConversion(.f32ConvertI64S) }
    case "f32.convert_i64_u": return { return try $0.visitConversion(.f32ConvertI64U) }
    case "f32.demote_f64": return { return try $0.visitConversion(.f32DemoteF64) }
    case "f64.convert_i32_s": return { return try $0.visitConversion(.f64ConvertI32S) }
    case "f64.convert_i32_u": return { return try $0.visitConversion(.f64ConvertI32U) }
    case "f64.convert_i64_s": return { return try $0.visitConversion(.f64ConvertI64S) }
    case "f64.convert_i64_u": return { return try $0.visitConversion(.f64ConvertI64U) }
    case "f64.promote_f32": return { return try $0.visitConversion(.f64PromoteF32) }
    case "i32.reinterpret_f32": return { return try $0.visitConversion(.i32ReinterpretF32) }
    case "i64.reinterpret_f64": return { return try $0.visitConversion(.i64ReinterpretF64) }
    case "f32.reinterpret_i32": return { return try $0.visitConversion(.f32ReinterpretI32) }
    case "f64.reinterpret_i64": return { return try $0.visitConversion(.f64ReinterpretI64) }
    case "i32.extend8_s": return { return try $0.visitUnary(.i32Extend8S) }
    case "i32.extend16_s": return { return try $0.visitUnary(.i32Extend16S) }
    case "i64.extend8_s": return { return try $0.visitUnary(.i64Extend8S) }
    case "i64.extend16_s": return { return try $0.visitUnary(.i64Extend16S) }
    case "i64.extend32_s": return { return try $0.visitUnary(.i64Extend32S) }
    case "memory.init":
        let (dataIndex) = try expressionParser.visitMemoryInit(wat: &wat)
        return { return try $0.visitMemoryInit(dataIndex: dataIndex) }
    case "data.drop":
        let (dataIndex) = try expressionParser.visitDataDrop(wat: &wat)
        return { return try $0.visitDataDrop(dataIndex: dataIndex) }
    case "memory.copy":
        let (dstMem, srcMem) = try expressionParser.visitMemoryCopy(wat: &wat)
        return { return try $0.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem) }
    case "memory.fill":
        let (memory) = try expressionParser.visitMemoryFill(wat: &wat)
        return { return try $0.visitMemoryFill(memory: memory) }
    case "table.init":
        let (elemIndex, table) = try expressionParser.visitTableInit(wat: &wat)
        return { return try $0.visitTableInit(elemIndex: elemIndex, table: table) }
    case "elem.drop":
        let (elemIndex) = try expressionParser.visitElemDrop(wat: &wat)
        return { return try $0.visitElemDrop(elemIndex: elemIndex) }
    case "table.copy":
        let (dstTable, srcTable) = try expressionParser.visitTableCopy(wat: &wat)
        return { return try $0.visitTableCopy(dstTable: dstTable, srcTable: srcTable) }
    case "table.fill":
        let (table) = try expressionParser.visitTableFill(wat: &wat)
        return { return try $0.visitTableFill(table: table) }
    case "table.get":
        let (table) = try expressionParser.visitTableGet(wat: &wat)
        return { return try $0.visitTableGet(table: table) }
    case "table.set":
        let (table) = try expressionParser.visitTableSet(wat: &wat)
        return { return try $0.visitTableSet(table: table) }
    case "table.grow":
        let (table) = try expressionParser.visitTableGrow(wat: &wat)
        return { return try $0.visitTableGrow(table: table) }
    case "table.size":
        let (table) = try expressionParser.visitTableSize(wat: &wat)
        return { return try $0.visitTableSize(table: table) }
    case "i32.trunc_sat_f32_s": return { return try $0.visitConversion(.i32TruncSatF32S) }
    case "i32.trunc_sat_f32_u": return { return try $0.visitConversion(.i32TruncSatF32U) }
    case "i32.trunc_sat_f64_s": return { return try $0.visitConversion(.i32TruncSatF64S) }
    case "i32.trunc_sat_f64_u": return { return try $0.visitConversion(.i32TruncSatF64U) }
    case "i64.trunc_sat_f32_s": return { return try $0.visitConversion(.i64TruncSatF32S) }
    case "i64.trunc_sat_f32_u": return { return try $0.visitConversion(.i64TruncSatF32U) }
    case "i64.trunc_sat_f64_s": return { return try $0.visitConversion(.i64TruncSatF64S) }
    case "i64.trunc_sat_f64_u": return { return try $0.visitConversion(.i64TruncSatF64U) }
    default: return nil
    }
}
